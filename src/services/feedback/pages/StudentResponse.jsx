import React, { useEffect } from 'react'
import { useQuery } from 'react-query'
import fetchData from '../../dashboard/js/fetchData'
import { useParams } from 'react-router-dom'
import { useState } from 'react'
import GoBack from '../../../components/GoBack'

const StudentResponse = () => {

    const { schoolName, academicYear } = useParams()
    const [res, setRes] = useState([])
    const [teachers, setTeachers] = useState([])

    const param = { model: 'StudentFeedback', filter: { schoolName, academicYear } }
    const { data, isLoading, isError, error, refetch } = useQuery([param.model, param], () => fetchData(param))

    const params = { model: 'User', filter: { department: schoolName } }
    const { data: teacherData, isLoading: isTeacherLoading } = useQuery([params.model, params], () => fetchData(params))

    useEffect(() => {
        setTeachers(teacherData?.data?.data?.map((teacher) => `${teacher.salutation} ${teacher.name}`))
    }, [teacherData])

    useEffect(() => {
        setRes(data?.data?.data ? data?.data?.data?.map(({ response }) => (JSON.parse(response))) : [])
    }, [data])

    useEffect(() => {
        console.log('res :', res)
    }, [res])

    const generalQuestions = [
        {
            type: 'check',
            required: true,
            question: 'Tick only those teachers who taught you this year',
        },
        {
            type: 'radio',
            required: true,
            question: 'Choose the program you are currently enrolled in',
        },
        {
            type: 'table',
            required: true,
            question: 'Rate the course',
            head: ['Very Good', 'Good', 'Satisfactory', 'Not-Satisfactory'],
            cell: ['Depth of the course content including project work if any', 'Extent of coverage of course', 'Applicability/relevance to real life situations', 'Learning dynamicValue (in terms of knowledge, concepts, manual skills, analytical abilities and broadening perspectives', 'Clarity and relevance of textual reading', 'Relevance of additional source material (Library)', 'Extent of effort required by students', 'Overall rating']
        },
        {
            type: 'table',
            required: true,
            question: 'Rate the Facilities available',
            head: ['Very Good', 'Good', 'Satisfactory', 'N/A'],
            cell: ['Sufficient number of prescribed books are available in the Library.', 'The books prescribed/listed as reference materials are relevant, updated and appropriate', 'Infrastructural facilities, such as studentâ€™s room/ girls room/carrels, class rooms, reading rooms and toilets are available in the Department.', 'Laboratory facilities / Field Visits provided	']
        },
        {
            type: 'check',
            required: true,
            question: 'Is your background benefiting from this course?',
        },
        {
            type: 'check',
            required: true,
            question: 'The syllabus was?',
        },
        {
            type: 'check',
            required: true,
            question: 'How helpful was the internal assesssment?',
        },
        {
            type: 'radio',
            required: true,
            question: 'Were are you provided with a course and lecture outline at the beginning?',
        },
        {
            type: 'radio',
            required: true,
            question: 'If Yes, was it followed?',
        },
        {
            type: 'radio',
            required: true,
            question: 'If followed, was it helpful?',
        },
        {
            type: 'text',
            required: true,
            question: 'If you have other major comments to offer',
        },
        {
            type: 'text',
            question: 'Name of the student',
        },
        {
            type: 'text',
            question: 'Email address',
        },
        {
            type: 'text',
            question: 'Contact number',
        },

    ]

    const teacherQuestions = [
        {
            type: 'text',
            required: true,
            question: 'Subject/Paper taught by '
        },
        {
            type: 'table',
            required: true,
            question: 'About the teacher',
            head: ['Very Good', 'Good', 'Satisfactory', 'Un-Satisfactory'],
            cell: ['The teacher is generally well-organized and prepared for class.', 'Knowledge base of the teacher (as perceived by you)', 'Communication skills (in terms of articulation and comprehensibility', 'Ability to integrate content with other courses', 'Provision of sufficient time for feedback', 'Interest generated by the teacher']
        },
        {
            type: 'check',
            required: true,
            question: 'How much of the syllabus was covered in class by ',
            options: ['85 to 100%', '70 to 85%', '55 to 70%', 'Less than 55%']
        },
        {
            type: 'text',
            required: true,
            question: 'If you have other major comments for ',
        },

    ]

    return (
        <div>

            <div>
                <GoBack pageTitle={`Student Feedback Response ${res.length > 0 ? `(${res.length})` : `(0)`}`} />
            </div>


            {
                res?.length > 0 &&
                <div>
                    {

                        <div className="my-5">
                            {
                                generalQuestions.map((question, index) => {

                                    return <div className="bg-blue-50 border-t-2 rounded-t-md border-t-blue-400 p-3 m-3">
                                        <p className='font-semibold'>{question.question}</p>

                                        <div className='border-l-2 ml-1 border-l-blue-500 '>
                                            <div className='ml-4'>
                                                {
                                                    res.map((resItem) => {
                                                        return <ResponseHandler question={question} resItem={resItem} />

                                                    })
                                                }
                                            </div>
                                        </div>



                                    </div>
                                })
                            }

                            {teacherQuestions.map((question) => {
                                const hasResponse = teachers?.some((teacher) => res.some((resItem) => resItem[`${question.question} ${teacher}`]));

                                if (hasResponse) {
                                    return (
                                        <div>
                                            {teachers?.map((teacher) => {
                                                const teacherResponse = res.filter((resItem) => resItem[`${question.question} ${teacher}`]);

                                                if (teacherResponse.length > 0) {
                                                    return (
                                                        <div className="bg-blue-50 border-t-2 rounded-t-md border-t-blue-400 p-3 m-3">
                                                            <p className='font-semibold'>{`${question.question} ${teacher}`}</p>
                                                            <div className='border-l-2 ml-1 border-l-blue-500 '>
                                                                <div className='ml-4'>
                                                                    {teacherResponse.map((resItem) => (
                                                                        <ResponseHandler question={question} resItem={resItem} dynamic={true} dynamicValue={`${question.question} ${teacher}`} />
                                                                    ))}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    );
                                                }
                                                return null;
                                            })}
                                        </div>
                                    );
                                }
                                return null;
                            })}


                        </div>
                    }
                </div>
            }
        </div>
    )
}

export default StudentResponse



const ResponseHandler = ({ question, resItem, dynamic = false, dynamicValue }) => {
    return <div className="bg-white rounded-md border p-2 my-2">
        {
            question.type === 'table' ?
                question.cell.map((cell, cellIndex) => {
                    return <div className='mt-3'>
                        <p>{cellIndex + 1}.  {cell}</p>
                        <p className='text-sm font-semibold text-green-700'>{resItem?.[dynamic ? dynamicValue : question.question]?.[cell]}</p>
                    </div>
                }) : null
        }

        {
            question.type === 'text' ? <div>
                <p className='text-sm font-semibold text-green-700'>
                    {resItem[dynamic ? dynamicValue : question.question]}</p>
            </div> : null
        }

        {
            question.type === 'date' ? <div>
                <div className='flex flex-col justify-start'>
                    <span className='text-sm font-semibold text-green-700 '>{resItem[dynamic ? dynamicValue : question.question]}</span>  <span className="text-[10px] text-muted">(YYYY-MM-DD)</span></div>
            </div> : null
        }

        {
            question.type === 'radio' ? <div>
                <p className='text-sm font-semibold text-green-700'>
                    {resItem[dynamic ? dynamicValue : question.question]}</p>
            </div> : null
        }

        {
            question.type === 'check' ? <div>

                {
                    resItem[dynamic ? dynamicValue : question.question].map((ans, ansIndex) => {
                        return <span className='text-sm font-semibold text-green-700'>
                            {ansIndex > 0 && ', '}
                            {ans}
                        </span>
                    })
                }
            </div> : null
        }
    </div>
}

export { ResponseHandler }